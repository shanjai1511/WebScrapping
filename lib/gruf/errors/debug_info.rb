# frozen_string_literal: true

# Copyright (c) 2017-present, BigCommerce Pty. Ltd. All rights reserved
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
module Gruf
  module Errors
    ##
    # Represents debugging information for an exception that occurred in a gRPC service
    #
    class DebugInfo
      # @!attribute [r] detail
      #   @return [String] The detail message of the exception
      attr_reader :detail
      # @!attribute [r] stack_trace
      #   @return [Array<String>] The stack trace generated by the exception as an array of strings
      attr_reader :stack_trace

      ##
      # @param [String] detail The detail message of the exception
      # @param [Array<String>] stack_trace The stack trace generated by the exception as an array of strings
      #
      def initialize(detail, stack_trace = [])
        @detail = detail
        @stack_trace = (stack_trace.is_a?(String) ? stack_trace.split("\n") : stack_trace)

        # Limit the size of the stack trace to reduce risk of overflowing metadata
        stack_trace_limit = Gruf.backtrace_limit.to_i
        stack_trace_limit = 10 if stack_trace_limit.negative?
        @stack_trace = @stack_trace[0..stack_trace_limit] if stack_trace_limit.positive?
      end

      ##
      # Return this object marshalled into a hash
      #
      # @return [Hash] The debug info represented as a hash
      #
      def to_h
        {
          detail: detail,
          stack_trace: stack_trace
        }
      end
    end
  end
end
